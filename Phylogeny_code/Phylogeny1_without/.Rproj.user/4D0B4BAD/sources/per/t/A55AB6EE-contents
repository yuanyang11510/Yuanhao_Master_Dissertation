library(tidyverse)
library(phangorn)
library(ggtree)
library(tanggle)
library(TreeTools)

#1. Préparation des données
  #1.1. Import
    # url <- "https://raw.githubusercontent.com/yuanyang11510/Dissertation-Master-Codes/main/With%20borrowings(3882).tsv"
    # download.file(url, "BAI.tsv")
    # lx <- read_tsv("BAI.tsv", comment = "#") %>%
    lx = read_tsv ("Data/With borrowings(3882).tsv", comment = "#") 

  #1.2. Conversion
    lx_m = lx %>%
      select(CONCEPT_ID, DOCULECT, COGID) %>%
      distinct() %>%
      pivot_wider(
        names_from = DOCULECT,
        values_from = CONCEPT_ID,
        values_fill = 0,
        values_fn = length
      ) %>%
      select(-COGID)

#A faire: Traitement des données marquantes    
        
    lx_phy <- phyDat(lx_m,
                     type = "USER",
                     levels = c(0, 1),
                     names = names(lx_m)
    )
    lx_phy
    
    write.phyDat(lx_phy, "Output/lx_phy_with.txt")
    
#2. Méthodes par distance
  #2.1. Calcul des distances  
    lx_dist <- dist.hamming(lx_phy)
    
    lx_dist_m <- as.matrix(lx_dist)
    lx_dist_m[upper.tri(lx_dist_m)] <- NA
    options(knitr.kable.NA = "")
    knitr::kable(lx_dist_m, digits = 2)
    
    lx_sim_m <- (1 - as.matrix(lx_dist)) * 100
    lx_sim_m[upper.tri(lx_sim_m)] <- NA
    options(knitr.kable.NA = "")
    knitr::kable(lx_sim_m, digits = 2)
    
  #2.2. UPGMA
    lx_upgma <- upgma(lx_dist)
    lx_upgma
    write.tree(lx_upgma, "Output/lx_upgma_with.nwk")
    plot(lx_upgma)
    
    # upgma_tree <- ggtree(lx_upgma) +
    #   geom_tiplab() +
    #   xlim_tree(0.18) +
    #   theme_tree()
    # upgma_tree
    
  #2.3. Neighbour-joining
    lx_nj <- NJ(lx_dist)
    lx_nj
    plot(lx_nj, "unrooted")
    plot(lx_nj, "tidy")
    
    # nj_tree <- ggtree(lx_nj, layout = "daylight") +
    #   geom_tiplab2() +
    #   xlim(-.3, .2) +
    #   ylim(-.2, .2) +
    #   theme_tree()
    # nj_tree

  #2.4. neighborNet
    lx_nn <- neighborNet(lx_dist)
    lx_nn
    plot(lx_nn)
    
    # nn_nx <- ggsplitnet(lx_nn) +
    #   geom_tiplab2() +
    #   xlim(-.3, .2) +
    #   ylim(-.2, .2) +
    #   theme_tree()
    # nn_nx

#3. Méthodes de parcimonie
  #3.1. Parcimonie générale (branch and bound)
    lx_bab <- bab(lx_phy)
    lx_bab
    
    lx_bab <- acctran(lx_bab, lx_phy)
    write.tree(lx_bab, "Output/lx_bab.nwk")
    
    ggtree(lx_bab[[1]], layout = "daylight") +
      geom_tiplab2() +
      xlim(-25, 45) + ylim(-30, 60) +
      theme_tree()
    
    ggtree(lx_bab[[2]], layout = "daylight") +
      geom_tiplab2() +
      xlim(-25, 45) + ylim(-30, 60) +
      theme_tree()
    
    ggtree(lx_bab[[3]], layout = "daylight") +
      geom_tiplab2() +
      xlim(-25, 45) + ylim(-30, 60) +
      theme_tree()
    
    ggtree(lx_bab[[4]], layout = "daylight") +
      geom_tiplab2() +
      xlim(-25, 45) + ylim(-30, 60) +
      theme_tree()

  #3.2. Parcimonie ratchet
    lx_pratchet <- pratchet(lx_phy)#基于lx_phy通过Parcimonie Ratchet(属于méthode heuristique启发法的一种)得到一棵无根的谱系树（唯一）；在分类单元数量在十余个以上时，适用该方法
    lx_pratchet <- acctran(lx_pratchet, lx_phy)
    lx_pratchet
    
    ggtree(lx_pratchet, layout = "daylight") +
      geom_tiplab2() +
      xlim(-70, 30) + ylim(-35, 45) +
      theme_tree()

#A faire : Parcimonie de Camin-Sokal et de Dollo
    
#4. Evaluation
  #4.1. Evaluation de la robustesse (UPGMA, bootstrap)
  #此处是以2.2.中通过UPGMA得到的谱系树为例，运用bootstrap（自助法）来测试每棵谱系树的每条分支的稳定性
    lx_m <- PhyDatToMatrix(lx_phy)#PhyDatToMatrix是为了重新得到数据的矩阵，但不知作用为何，待研究
    boot_upgma_hamming <- function(x) {
      upgma(dist.hamming(phyDat(x, type = "USER", levels = c(0, 1))))
    }#定义一个函数boot_upgma_hamming，将每次抽样的数据都转换成一个通过UPGMA得到的谱系树
    n_bs <- 1000#定义进行1000次取样
    
    set.seed(123456)#set.seed是为了固定"graine aléatoire"，确保结果的可复现性（reproductibilité），待研究
    lx_upgma_bs <- boot.phylo(lx_upgma,
                              lx_m,
                              boot_upgma_hamming,
                              B = n_bs,
                              trees = TRUE,
                              quiet = TRUE)#待研究该命令中每个参数的意义
    
    upgma_bs_scores <- prop.clades(lx_upgma, lx_upgma_bs$trees, rooted = TRUE)#符号$表示后者在前者当中
    upgma_support <- c(rep(n_bs, length(lx_phy)), upgma_bs_scores)
    upgma_support_pct <- upgma_support / n_bs#最后得到的是在1000次抽样中，依据每次抽样数据得到的1000棵谱系树中，与基于全部数据的UPGMA得到的谱系树的某个分支的位置相一致的数量
    #但关于以上三行代码的具体细节，待研究
  
    ggtree(lx_upgma) +
      geom_tiplab() +
      geom_nodelab(aes(label = upgma_support_pct), geom = "text", hjust = -.1) +#将上述通过bootstrap得到的谱系树中每个分支与基于全部数据的得到的谱系树对应分支的符合比例加到谱系树的分支上
      xlim_tree(0.14) +
      theme_tree()#但该命令中各个参数的意义，待研究

    upgma_support_pct[upgma_support_pct < .7] <- NA#将谱系树中符合比例低于0.7分支舍去，只显示符合比例高于0.7的分支
    
    ggtree(lx_upgma) +
      geom_tiplab() +
      geom_nodelab(aes(label = upgma_support_pct), geom = "text", hjust = -.1) +
      xlim_tree(0.14) +
      theme_tree()

    #4.2. Résumer l'accord entre des résultats
    lx_bab_consensus <- consensus(lx_bab, p = 1)
    ggtree(lx_bab_consensus, layout = "daylight") +
      geom_tiplab2() +
      xlim(-4.75, 3.85) + ylim(-4.25, 4.75) +
      theme_tree()#得到一棵“共识”（consensus）谱系树，使其满足各分支符合所有可能的谱系树的情况
    
    lx_bab_consensus_mj <- consensus(lx_bab, p = .5)
    ggtree(lx_bab_consensus_mj, layout = "daylight") +
      geom_tiplab2() +
      xlim(-6, 5) + ylim(-5, 5.25) +
      theme_tree()#得到一棵“共识”（consensus）谱系树，使其满足各分支符合二分之一的谱系树的情况
    
#A faire: Score de parcimonie, CI, RI, etc.

    